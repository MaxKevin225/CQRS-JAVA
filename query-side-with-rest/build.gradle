buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.2.6.RELEASE")
        classpath('se.transmode.gradle:gradle-docker:1.2')
    }
}

configurations{
    compile.exclude module: "spring-boot-starter-tomcat"
}

jar {
    baseName = 'product-query-side'
}

apply plugin: 'idea'
apply plugin: 'spring-boot'
apply plugin: 'docker'

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    compile project(':common-things')
    compile("org.axonframework:axon-amqp:2.4.1")

    compile("org.springframework.boot:spring-boot-starter-actuator")
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework.boot:spring-boot-starter-jetty")
    compile("org.springframework.boot:spring-boot-starter-amqp")
    compile("org.springframework.boot:spring-boot-starter-data-rest")
    compile("org.springframework.boot:spring-boot-starter-data-jpa")
    compile("com.h2database:h2")

    testCompile("org.axonframework:axon-test:2.4.1")
    testCompile("org.springframework.boot:spring-boot-starter-test")
}

task buildDocker(type: Docker, dependsOn: assemble){
    push = false
    applicationName = jar.baseName
    dockerfile = file('src/main/docker/Dockerfile')
    doFirst{
        copy {
            from jar
            into stageDir
        }
    }
}

task createDistribution(type: Zip, dependsOn: buildDocker){
    from buildDocker.stageDir
    from('src/main/docker/Dockerfile')
    from('src/main/docker/Dockerrun.aws.json')
}

